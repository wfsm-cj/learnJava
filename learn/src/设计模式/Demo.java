package 设计模式;

/**
 * @author chenjie
 * @date 2021/5/19-8:35
 */
public class Demo {
    /*
    * 设计模式
    *   对接口编程而不是对实现编程。
    *   优先使用对象组合而不是继承
    * */

    /*
    * 设计模式六大原则
    *   1，开闭原则 (Open Close Principle)
    *           对扩展开放，对修改关闭
    *   2，里氏代换原则 (Liskov Substitution Principle)
    *           任何基类可以出现的地方，子类一定可以出现。是对开闭原则的补充，实现开闭原则的关键步骤就是抽象化
    * ，而基类和子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤规范
    *
    *   3，依赖倒转原则（Dependence Inversion Principle）
    *       是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体
    *
    *   4，接口隔离原则(Interface Segregation Principle)
    *       使用多个隔离的接口，比使用单个接口要好，他还有另一个意思：降低类之间的耦合度，。由此可见，
    * 其实设计模式就是从大型软件架构出发，便于升级和维护的软件设计思想，他强调降低依赖，降低耦合
    *   5，迪米特法则，又称最少知道的原则（Demeter Principle）
    *       一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立
    *   6，合成复用原则（Composite Reuse Principle）
    *       尽量使用合成/聚合的方式，而不是使用继承
    * */
}
