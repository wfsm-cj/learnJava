package 异常.exception.处理场景;

/**
 * @author chenjie
 * @date 2021/5/18-17:26
 */
public class Demo {
    /*
    * 1，数据合法性验证
    *       通常都是多系统交互，你是没有资格去看客户信息的
    *   一定会涉及带数据的传输和验证，当你所在的系统接受到数据之后，验证其合法性
    *   1，验证客户姓名   姓名长度，不能有别的符号
                不合法名字，是没资格做交易
                * if(不合法名字) {
                *       //自定义异常 可以用
                *  throw new Exception(“客户姓名有误，。。。。。”);
                * }
    *   2，划账 ：
    *       一定涉及到第三方系统
    *       boolean flag = false;  //划账是否成功
    *       划账失败
    *       try{
    *           // 返回一个boolean 类型
    *         flag = 调用第三方划账交易（客户姓名，银行卡号，卡密码，交易金额）；
    *           划账成功 返回true 否则返回false，甚至不返回（网络不好）
    *       }catch(Exception e){
    *           // 唯一需要保证的就是客户的交易成功与否，与是否划账了一致
    *           if(!false) {
    *               没成功就取消交易
    *               再次向第三方发起划账流水冲销(取消)交易
    *           }
    *       }finally{
    *            if(!false) {
    *               没成功就取消交易
    *               再次向第三方发起划账流水冲销(取消)交易
    *           }
    *
    *       }
    * */
}
